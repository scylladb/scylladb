#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (C) 2025-present ScyllaDB
#

#
# SPDX-License-Identifier: LicenseRef-ScyllaDB-Source-Available-1.0
#

# Generate a C++ header file which includes the contents of the input file in a string literal.

import argparse
import gzip
import json
import os

def main():
    parser = argparse.ArgumentParser(description='Generate a C++ header file with variables storing the gzip-compressed content of the input files.')
    parser.add_argument('--input-file', type=str, help='Input file')
    parser.add_argument('--output-file', type=str, help='Output file')

    args = parser.parse_args()

    output_dir = os.path.dirname(args.output_file)
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    with open(args.input_file, 'r') as resource_file:
        resources = json.load(resource_file)

        with open(args.output_file, 'w') as outfile:
            outfile.write(
"""/*
 * Copyright (C) 2025-present ScyllaDB
 * 
 * SPDX-License-Identifier: LicenseRef-ScyllaDB-Source-Available-1.0
 *
 * This file was generated by resource.py. Do not edit it manually.
 */

#include "resources.hh"

namespace resources {

""")
            for resource in resources:
                resource_path = os.path.join(os.path.dirname(args.input_file), resource['file'])

                with open(resource_path, 'br') as infile:
                    content = infile.read()

                compressed_content = gzip.compress(content)

                bytes_content = ", ".join(f"0x{byte:02x}" for byte in compressed_content)

                resource_name = resource['name']
                cpp_resource_name = resource_name.replace('.', '_')

                outfile.write(f"constexpr uint8_t {cpp_resource_name}_content[] = {{{bytes_content}}};\n")

            resources_name = os.path.basename(args.input_file)[:-len('.resources')].replace('-', '_')
            outfile.write(f"\nconst resources::resource {resources_name}_resources_manifest[] = {{\n")
            for resource in resources:
                resource_name = resource['name']
                cpp_resource_name = resource_name.replace('.', '_')
                outfile.write(f'    {{.name = "{resource_name}", .content_type = "{resource["content-type"]}", .content = bytes_view(reinterpret_cast<const signed char*>({cpp_resource_name}_content), std::size({cpp_resource_name}_content))}},\n')
            outfile.write("};\n")

            outfile.write("\n} // namespace resources")

if __name__ == "__main__":
    main()

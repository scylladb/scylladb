#!/bin/bash


set -e

trap 'echo "error $? in $0 line $LINENO"' ERR

SCRIPT_NAME=$(basename $0)
MYDIR=$(dirname $0)

function print_usage {
cat << EOF
Usage: ./${SCRIPT_NAME} [options]

Script for estimating appropriate streaming bandwidth limit for scylla

Options:

--help,-h
    Print this help message and exit.

--verbose,-v
    Print additional info

--nic,-n [network interface]
    Network interface to which scylla will be bound, and for which
    estimate should be made.

--datadisk,-d [mount point]
    Disk on which scylla data dir will be located, and for which 
    estimate should be made. This should match an entry in io-properties.

--io-properties,-p [io-properties.yaml]
    IO properties, generated by iotune. Default is ./io-properties.yaml

EOF
}

VERBOSE_LEVEL=0
IO_PROPERTIES='./io-properties.yaml'
MOUNT_POINT='/'
NIC='eth0'

if [[ $# -ge 1 && ( "$1" == "--help" || "$1" == "-h" ) ]]; then
    print_usage
    exit 0
fi

function log {
    if [[ $VERBOSE_LEVEL -ge 1 ]]
    then
        echo $@ >&2
    fi
}

while [[ $# -gt 1 ]]
do
    case $1 in
        "--verbose"|"-v")
            VERBOSE_LEVEL=2
            shift 1
            ;;
        "--nic"|"-n")
            NIC=$2
            shift 2
            ;;
        "--datadisk"|"-d")
            MOUNT_POINT=$2
            shift 2
            ;;
        "--io-properties"|"-p")
            IO_PROPERTIES=$2
            shift 2
            ;;
        *)
            echo "error: unrecognized option: $1, see $0 -h for usage" >&2
            exit 1
            ;;
    esac
done

if [ ! -f "$IO_PROPERTIES" ]; then 
    echo "No such file: $IO_PROPERTIES";
    exit 1
fi 

# read yaml entry for mount point
DISKBYTES=`python3 -c "import yaml; doc=yaml.safe_load(open('$IO_PROPERTIES')); d=[d for d in doc['disks'] if d['mountpoint'] == '$MOUNT_POINT']; print(int((d[0]['read_bandwidth']+d[0]['write_bandwidth'])/2));"`

NETBW=`cat /sys/class/net/$NIC/speed 2> /dev/null || echo ''`

if [ -z $NETBW ]; then 
    log "Could not determine link speed for $NIC; Checking if on EC2...";
    EC2METAADDR=${EC2METAADDR:="169.254.169.254"}
    EC2METABASE="http://$EC2METAADDR/latest"
    TOKEN=`curl --connect-timeout 1 -s -X PUT $EC2METABASE/api/token -H "X-aws-ec2-metadata-token-ttl-seconds: 21600" || echo ''`
    if [ ! -z $TOKEN ]; then 
        INSTANCETYPE=`curl -s -H "X-aws-ec2-metadata-token: $TOKEN" $EC2METABASE/meta-data/instance-type`
        if [ ! -z "$INSTANCETYPE" ]; then 
            log "Found instance type $INSTANCETYPE";

            # Note: generated with 
            # aws ec2 describe-instance-types --query "InstanceTypes[].[InstanceType, NetworkInfo.NetworkPerformance, NetworkInfo.NetworkCards[0].BaselineBandwidthInGbps]" --output json
            EC2INFO="$MYDIR/aws-instancetype-network.json"

            NETBW=`python3 -c "import json; f=open('$EC2INFO');a=json.load(f); aa=[a for a in a if a[0] == '$INSTANCETYPE']; print(int(aa[0][2] * 1000));"`
            log "Found bandwidth entry $NETBW MBPS for $INSTANCETYPE";
        fi
    fi
fi

if [ -z $NETBW ]; then 
    echo "Could not determine network capacity." >&2
    exit 1
fi

DISKMBYTES=$(($DISKBYTES / (1024 * 1024)))
# adjust to .75 of actual reported bw
NETMBYTES=$(((NETBW * 3 / (8*4))))
CAP=$(( DISKMBYTES < NETMBYTES ? DISKMBYTES : NETMBYTES ))

log "Minimum bandwidth estimated to $CAP MB/S";

# Taken out of rear compartmenst: min capacity disk/(.75 * nw)
# expressed as MB/S
echo $CAP
